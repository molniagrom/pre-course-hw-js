// Что такое цикл и какие 4 этапа у нас есть?

// Цикл - это структура программирования, которая позволяет выполнять определенный блок кода несколько раз. Есть четыре основных этапа в цикле:

// Инициализация: Устанавливаются начальные условия для выполнения цикла.
// Условие: Проверяется условие выполнения цикла. Если условие истинно, цикл продолжается, если ложно - цикл завершается.
// Выполнение: Блок кода внутри цикла выполняется, пока условие истинно.
// Обновление: После выполнения каждой итерации цикла происходит обновление значений для следующей итерации.

// Что такое тело цикла?

// Тело цикла в программировании - это блок кода или набор инструкций, который будет выполняться многократно в каждой итерации цикла. Это часть цикла, где происходит основная работа или операции, которые нужно повторить несколько раз в зависимости от условий цикла.

// Например, если у вас есть цикл, который должен выполниться 5 раз, то тело цикла будет содержать инструкции, которые будут выполняться каждый раз при прохождении одной итерации цикла. Таким образом, тело цикла определяет действия, которые будут повторяться в каждом шаге выполнения цикла.

// Использование цикла для обхода массива

// // Создадим массив
// let arr = [1, 2, 3, 4, 5];

// // Используем цикл for для обхода массива
// for (let i = 0; i < arr.length; i++) {
//     console.log(arr[i]);
// }

// =====================================================================

// for (let i = 1; i <= 10; i++) { 
//     console.log(i); 
// }


// let numbers = [1, 2, 3, 4, 5]; // Пример массива чисел 
// for (let i = 0; i < numbers.length; i++) { 
//     const number = numbers[i]
//     console.log(number); 
// } 

// let objects = [{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}]; // Пример массива объектов
// for (let i = 0; i < objects.length; i++) {
//     const object = objects[i]
//     console.log(object.name);
// }

// =====================================================================

// Почему нельзя из массива доставать объекты таким образом: array[0], array[...], array[100]?

// В некоторых языках программирования, таких как JavaScript, объекты могут быть хранены в массивах, и к ним можно обращаться по индексу. Однако, при извлечении объектов напрямую из массива по индексу, вы получите ссылку на объект, а не его копию. Это может привести к проблемам, если вы изменяете объект, полученный из массива, так как это повлияет на сам объект в массиве.

// Поэтому, для работы с объектами, находящимися в массиве, часто рекомендуется создавать и использовать копию объекта, а не изменять сам объект в массиве напрямую. Это поможет избежать неожиданных побочных эффектов и сохранит целостность данных.

// Таким образом, хотя извлечение объектов из массива по индексу возможно, важно понимать потенциальные проблемы с изменением объектов напрямую из массива и принимать соответствующие меры предосторожности.

// Всегда ли увеличивается i после последнего выполнения тела цикла?

// Нет, не всегда. Это зависит от типа цикла и его условий.

// Как нашему алгоритму узнать, сколько элементов в массиве, чтобы корректно установить остановку цикла?

// length

// Что значит данный код: i++

// Переменная i будет увеличиваться на 1 после каждой итерации цикла благодаря оператору i++. Таким образом, значения i будут последовательно равняться 0, 1, 2, 3, 4 в ходе выполнения цикла.

// _______________________________________________________________________________________________

// Создаем переменную playlists с двумя плейлистами
let playlists = ["Плейлист 1", "Плейлист 2"];

// Функция для отрисовки плейлистов
function renderPlaylists(playlists) {
    // Цикл для отрисовки каждого плейлиста
    for (let i = 0; i < playlists.length; i++) {
        console.log("Плейлист " + (i + 1) + ": " + playlists[i]);
    }
}

// Вызываем функцию renderPlaylists и передаем ей переменную playlists
renderPlaylists(playlists);

// Использование выражения (i + 1) позволяет нумеровать элементы массива с 1, делая вывод более понятным для пользователей. Потому что в большинстве языков программирования нумерация элементов массива начинается с 0, а добавление 1 к переменной i позволяет корректно отображать порядковые номера элементов, начиная с 1.

// Что такое цикл в цикле?

// Цикл в цикле, также известный как вложенный цикл, представляет собой конструкцию в программировании, когда один цикл находится внутри другого. Это означает, что внутренний цикл будет выполняться каждый раз, когда внешний цикл проходит одну итерацию.


